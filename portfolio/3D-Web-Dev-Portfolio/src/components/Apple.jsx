/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/


import gsap from 'gsap';
import { useGSAP } from '@gsap/react';
import React, { useRef, useState, useEffect } from 'react';
import { Float, useGLTF, useTexture } from '@react-three/drei';
import * as THREE from 'three';

export default function Apple(props) {

  const { nodes, materials } = useGLTF('/models/apple.glb'); 

  const { isInteractive, ...restProps } = props;

  const appleRef = useRef();
  const [hovered, setHovered] = useState(false);
  const animationTimeline = useRef(null);

  useGSAP(() => {

    if (!appleRef.current) return;

    gsap.killTweensOf(appleRef.current.rotation);

    animationTimeline.current = gsap.timeline({
      repeat: -1,
      repeatDelay: 0.5,
      paused: true,
    });

    animationTimeline.current.to(appleRef.current.rotation, {
      y: `+=${Math.PI * 2}`,
      x: `+=${Math.PI * 2}`,
      duration: 2.5,
      stagger: {
        each: 0.15,
      },
      ease: "none"
    });
  }, [nodes, materials]); 

  useEffect(() => {
    if (animationTimeline.current) {
      if (isInteractive) {
        animationTimeline.current.play();
      } else {
        animationTimeline.current.pause();
        gsap.to(appleRef.current.rotation, {
            x: 0,
            y: -0.155, 
            z: 0,
            duration: 0.5,
            ease: "power2.out"
        });
      }
    }
  }, [isInteractive]);

  return (
    
    <group {...restProps} dispose={null} scale={4}>
      <mesh
        ref={appleRef}
        castShadow
        receiveShadow
        geometry={nodes.mesh_id29.geometry}
        material={materials['47']}
        position={[-0.017, 0.031, 0.26]}
        rotation={[0, -0.155, 0]}
        scale={[0.344, 0.441, 0.001]}
        onPointerEnter={() => setHovered(true)}
        onPointerLeave={() => setHovered(false)}
      />
    </group>
  );
}

useGLTF.preload('/models/apple.glb');















/*
    Auto-generated by: https://github.com/pmndrs/gltfjsx


import gsap from 'gsap';
import { useGSAP } from '@gsap/react';
import { useRef, useState } from 'react';
import { Float, useGLTF, useTexture } from '@react-three/drei';

const Cube = ({ ...props }) => {
  const { nodes } = useGLTF('models/cube.glb');

  const texture = useTexture('textures/cube.png');

  const cubeRef = useRef();
  const [hovered, setHovered] = useState(false);

  useGSAP(() => {
    gsap
      .timeline({
        repeat: -1,
        repeatDelay: 0.5,
      })
      .to(cubeRef.current.rotation, {
        y: hovered ? '+=2' : `+=${Math.PI * 2}`,
        x: hovered ? '+=2' : `-=${Math.PI * 2}`,
        duration: 2.5,
        stagger: {
          each: 0.15,
        },
      });
  });

  return (
    <Float floatIntensity={2}>
      <group position={[9, -4, 0]} rotation={[2.6, 0.8, -1.8]} scale={0.74} dispose={null} {...props}>
        <mesh
          ref={cubeRef}
          castShadow
          receiveShadow
          geometry={nodes.Cube.geometry}
          material={nodes.Cube.material}
          onPointerEnter={() => setHovered(true)}>
          <meshMatcapMaterial matcap={texture} toneMapped={false} />
        </mesh>
      </group>
    </Float>
  );
};

useGLTF.preload('models/cube.glb');

export default Cube;

*/